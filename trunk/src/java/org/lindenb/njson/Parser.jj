
options {
STATIC=false;
}


PARSER_BEGIN(JSONParser)


package org.lindenb.njson;
/**
 * Author Pierre Lindenbaum
 * Javacc based JSON parser 
 * See http://plindenbaum.blogspot.com/2008/07/parsing-json-with-javacc-my-notebook.html
 * JSONParser
 *
 */
@SuppressWarnings("unchecked")
public class JSONParser
{

private String unescape(String s)
	{
	StringBuilder b=new StringBuilder(s.length());
	for(int i=0;i< s.length();++i)
		{
		if(s.charAt(i)=='\\' && i+1 < s.length())
			{
			switch(s.charAt(i+1))
				{
				case 'n': b.append('\n');break; 
				case 't': b.append('\t');break; 
				case '\\': b.append('\\');break; 
				case 'r': b.append('\r');break;
				case 'f': b.append('\f');break;
				case '\'': b.append('\'');break; 
				case '\"': b.append('\"');break;
				default: b.append(s.charAt(i+1)); break;
				}
			i++;
			}
		else
			{
			b.append(s.charAt(i));
			}
		}
	return s;
	}

/** just a test */
public static void main(String args[])
	{
	int optind=0;
	try
	        {
	      
	    if(optind==args.length)
	    	{
	    	new JSONParser(System.in).any();
	    	}
	    else
	    	{
	    	while(optind< args.length)
	    		{
	    		java.io.InputStream in=null;
			try 	
				{
				in=new java.io.FileInputStream(args[optind++]);
				new JSONParser(System.in).any();
				}
	    		catch (java.io.IOException e)
				{
				throw e;
				}
			finally
				{
				if(in!=null) in.close();
				in=null;
				}
	    		}
	    	}
	        }
	catch(Exception err)
	        {
	        err.printStackTrace();
	        }
	}

}

PARSER_END(JSONParser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n"])* "\n">
| <"/*">: INSIDE_COMMENT
}

<INSIDE_COMMENT>
SKIP:
{
        <"*/">: DEFAULT
|       <~[]>
}



TOKEN : /* LITERALS */
{
  <TRUE: "true">
| <FALSE: "false">
| <NULL: "null">
| <#LETTER: ["_","a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"] >
| <#SIGN: ["-","+"]>
| <#EXPONENT: ("E"|"e") (<SIGN>)? (<DIGIT>)+ >
| <FLOATING_NUMBER: (<DIGIT>)* "." (<DIGIT>)* (<EXPONENT>)?
| (<DIGIT>)+ (<EXPONENT>) >
| <INT_NUMBER: (<DIGIT>)+ >
| <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-")* >
| <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\""] >
| <SIMPLE_QUOTE_LITERAL:
"\'"
( (~["\'","\\","\n","\r"])
| <ESCAPE_CHAR>
)*
"\'"
>
|
<DOUBLE_QUOTE_LITERAL:
"\""
( (~["\"","\\","\n","\r"])
| <ESCAPE_CHAR>
)*
"\""
>
| <ARRAY_OPEN: "[">
| <ARRAY_CLOSE: "]">
| <COMMA: ",">
| <OBJECT_OPEN: "{">
| <OBJECT_CLOSE: "}">
| <PAR_OPEN: "(">
| <PAR_CLOSE: ")">
| <DOTDOT: ":">
}



public Node any():
	{Node o;}
	{
	(
	o= complexNode()
	| o= terminalNode()
	)
	{return o;}
	}

public ComplexNode complexNode():
	{ComplexNode o;}
	{
	(
	o= objectNode()
	| o= arrayNode()
	)
	{return o;}
	}

public TerminalNode terminalNode():
	{
	Token t;
	String s;
	}
	{
	(
	t=<FLOATING_NUMBER>
		{
		return new DecimalNode(t.image);
		}
	| t=<INT_NUMBER>
		{
		return new IntNode(t.image);
		}
	| <TRUE> { return BoolNode.TRUE;}
	| <FALSE> { return BoolNode.FALSE;}
	| <NULL> { return NilNode.INSTANCE; }
	| s=characters() { return new StringNode(s);}
	)
	}

private String characters():
	{
	Token t;
	}
	{
	(
	t=<SIMPLE_QUOTE_LITERAL>
		{
		return  unescape(t.image);
		}
	| t=<DOUBLE_QUOTE_LITERAL>
		{
		return unescape(t.image);
		}
	)
	}

public ArrayNode arrayNode():
	{ArrayNode vector= new ArrayNode(); Node o;}
	{
	openArray() ( o=any() {vector.add(o);} (comma() o=any() {vector.add(o);} ) * )? closeArray()
		{
		return vector;
		}
	}

public ObjectNode objectNode():
	{ObjectNode map= new ObjectNode(); }
	{
	openObject() ( keyValue(map) (comma() keyValue(map))*)? closeObject()
		{
		return map;
		}
	}

private void keyValue( ObjectNode map):
	{String k; Node v;}
	{
	(k=characters() <DOTDOT> v=any())
		{
		if(map.containsKey(k)) throw new ParseException(k+" defined twice in object");
		map.put(k,v);
		}
	}
	
/** function for streaming big object/array */
public void openObject():{}
	{
	<OBJECT_OPEN>
	}

/** function for streaming big object/array */
public void closeObject():{}
	{
	<OBJECT_CLOSE>
	}

/** function for streaming big object/array */
public void openArray():{}
	{
	<ARRAY_OPEN>
	}

/** function for streaming big object/array */
public void closeArray():{}
	{
	<ARRAY_CLOSE>
	}

/** function for streaming big object/array */
public void comma():{}
	{
	<COMMA>
	}

/** function for streaming big object/array */
public char commaOrCloseArray():{char c;}
	{
	( comma() {c=',';} | closeArray() { c=']';})
		{
		return c;
		}
	}

/** function for streaming big object/array */
public char commaOrCloseObject():{char c;}
	{
	( comma() {c=',';} | closeObject() { c='}';})
		{
		return c;
		}
	}
/** function for streaming big object/array */
public char openClomplex():{char c;}
	{
	( openArray() {c='[';} | openObject() { c='{';})
		{
		return c;
		}
	}

/** go to EOF, check that there are only some blanks chars */
public void eof():{}
	{
	<EOF>
	}	
	