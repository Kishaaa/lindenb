
options {
STATIC=false;
}


PARSER_BEGIN(JSONParser)


package org.lindenb.json;
/**
 * Author Pierre Lindenbaum
 * Javacc based JSON parser 
 * See http://plindenbaum.blogspot.com/2008/07/parsing-json-with-javacc-my-notebook.html
 *
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import org.lindenb.io.IOUtils;
import org.lindenb.util.C;
import org.lindenb.util.StringUtils;
/**
 *
 * JSONParser
 *
 */
@SuppressWarnings("unchecked")
public class JSONParser
{
private boolean allowLangModifiers=false;
private boolean allowUnquotedFields=false;

/** are we allowing unquoted fields for JSON objects */
public boolean isAllowingUnquotedFields()
	{
	return allowUnquotedFields;
	}	
	
/** allow unquoted fields for JSON objects */
public void setAllowingUnquotedFields(boolean allowUnquotedFields)
	{
	this.allowUnquotedFields=allowUnquotedFields;
	}	

/** are we allowing unquoted fields for JSON objects */
public boolean isAllowingLangModifiers()
	{
	return allowLangModifiers;
	}	
	
/** allow unquoted fields for JSON objects */
public void setAllowingLangModifiers(boolean allowLangModifiers)
	{
	this.allowLangModifiers=allowLangModifiers;
	}

/** creates an integer from a parsed text */
protected Number createInteger(String image)
	{
	return new java.math.BigInteger(image);
	}

/** creates an floating number from a parsed text */
protected Number createFloating(String image)
	{
	return new java.math.BigDecimal(image);
	}

/** creates a List */
protected List<Object> createArray()
	{
	return new ArrayList<Object>();
	}
	
/** create a Map */
protected Map<String,Object> createMap()
	{
	return new java.util.HashMap<String,Object>();
	}
	
/** create a literal string */
protected Map<String,Object> createLiteral(String text,String lang)
	{
	 Map<String,Object> m=createMap();
	 m.put("str",text);
	 m.put("lang",lang);
	 return m;
	}



/** invoke a function ParseException
 * default behavior: throws a 
 * @param functionName name of this function
 * @param params parameters
 * @throws ParseException
 */
protected Object invoke(String functionName,List<Object> params)
	 throws ParseException
	{
	throw new ParseException("syntax error: \""+functionName+"( \"..." );
	}

/** just a test */
public static void main(String args[])
	{
	int optind=0;
	try
	        {
	      
	    if(optind==args.length)
	    	{
	    	new JSONParser(System.in).any();
	    	}
	    else
	    	{
	    	while(optind< args.length)
	    		{
	    		java.io.InputStream in=null;
	    		try {
					in=  IOUtils.openInputStream(args[optind++]);
					new JSONParser(System.in).any();
					}
	    		catch (java.io.IOException e) {
					throw e;
					}
				finally
					{
					if(in!=null) in.close();
					in=null;
					}
	    		}
	    	}
	        }
	catch(Exception err)
	        {
	        err.printStackTrace();
	        }
	}

}

PARSER_END(JSONParser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n"])* "\n">
| <"/*">: INSIDE_COMMENT
}

<INSIDE_COMMENT>
SKIP:
{
        <"*/">: DEFAULT
|       <~[]>
}



TOKEN : /* LITERALS */
{
  <TRUE: "true">
| <FALSE: "false">
| <NULL: "null">
| <#LETTER: ["_","a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"] >
| <#SIGN: ["-","+"]>
| <#EXPONENT: ("E"|"e") (<SIGN>)? (<DIGIT>)+ >
| <FLOATING_NUMBER: (<DIGIT>)* "." (<DIGIT>)* (<EXPONENT>)?
| (<DIGIT>)+ (<EXPONENT>) >
| <INT_NUMBER: (<DIGIT>)+ >
| <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-")* >
| <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\""] >
| <SIMPLE_QUOTE_LITERAL:
"\'"
( (~["\'","\\","\n","\r"])
| <ESCAPE_CHAR>
)*
"\'"
>
|
<DOUBLE_QUOTE_LITERAL:
"\""
( (~["\"","\\","\n","\r"])
| <ESCAPE_CHAR>
)*
"\""
>
| <ARRAY_OPEN: "[">
| <ARRAY_CLOSE: "]">
| <COMMA: ",">
| <OBJECT_OPEN: "{">
| <OBJECT_CLOSE: "}">
| <PAR_OPEN: "(">
| <PAR_CLOSE: ")">
| <DOTDOT: ":">
| <AROBASE: "@">
}



public Object any():
	{Object o;}
	{
	(
	o=array()
	| o= object()
	| o= identifier()
	)
	{return o;}
	}

public Object identifier():
	{
	Token t;
	String s;
	Boolean b;
	Object o;
	String L=null;
	List<Object> params=null;
	}
	{
	(
	t=<FLOATING_NUMBER>
		{
		return createFloating(t.image);
		}
	| t=<INT_NUMBER>
		{
		return createInteger(t.image);
		}
	| <TRUE> { return Boolean.TRUE;}
	| <FALSE> { return Boolean.FALSE;}
	| <NULL> { return null; }
	| t=<IDENTIFIER> ( <PAR_OPEN> (o=any() { params=new ArrayList<Object>(); params.add(o);} (<COMMA> o=any() { params.add(o);})*)?<PAR_CLOSE> )?
		{
		if(params==null)
			{
			if(!isAllowingUnquotedFields())
				{
				throw new ParseException("unquoted fields are not allowed :'"+t.image+"'" );
				}
			return t.image;
			}
		return invoke(t.image,params);	
		}
	| t=<SIMPLE_QUOTE_LITERAL> (L=lang())?
		{
		if(L!=null) return createLiteral(t.image,L);
		return  C.unescape(StringUtils.unquote(t.image));
		}
	| t=<DOUBLE_QUOTE_LITERAL>  (L=lang())?
		{
		if(L!=null) return createLiteral(t.image,L);
		return C.unescape(StringUtils.unquote(t.image));
		}
	)
	}

private String lang():
	{
	Token t;
	}
	{
	<AROBASE> t=<IDENTIFIER>
		{
		if(!isAllowingLangModifiers())
			{
			throw new ParseException("syntax error : found '@"+t.image+"'" );
			}
		return t.image;
		}
	}

public List<Object> array():
	{List<Object> vector= createArray(); Object o;}
	{
	startArray() ( o=any() {vector.add(o);} (comma() o=any() {vector.add(o);} ) * )? closeArray()
		{
		return vector;
		}
	}

public Map<String,Object> object():
	{Map<String,Object> map= createMap(); }
	{
	startObject() ( keyValue(map) (comma() keyValue(map))*)? closeObject()
		{
		return map;
		}
	}

private void keyValue( Map<String,Object> map):
{Object k; Object v;}
	{
	(k=identifier() <DOTDOT> v=any())
		{
		if(k==null) throw new ParseException("null cannot be used as key in object");
		if(k.getClass()!=String.class) throw new ParseException(k.toString()+"("+k.getClass()+") cannot be used as key in object");
		String key= String.class.cast(k);
		if(map.containsKey(key)) throw new ParseException(k.toString()+" defined twice in object");
		map.put(key,v);
		}
	}
	
/** function for streaming big object/array */
public void startObject():{}
	{
	<OBJECT_OPEN>
	}

/** function for streaming big object/array */
public void closeObject():{}
	{
	<OBJECT_CLOSE>
	}

/** function for streaming big object/array */
public void startArray():{}
	{
	<ARRAY_OPEN>
	}

/** function for streaming big object/array */
public void closeArray():{}
	{
	<ARRAY_CLOSE>
	}

/** function for streaming big object/array */
public void comma():{}
	{
	<COMMA>
	}

/** function for streaming big object/array */
public char commaOrCloseArray():{char c;}
	{
	( comma() {c=',';} | closeArray() { c=']';})
		{
		return c;
		}
	}

/** function for streaming big object/array */
public char commaOrCloseObject():{char c;}
	{
	( comma() {c=',';} | closeObject() { c='}';})
		{
		return c;
		}
	}
/** function for streaming big object/array */
public char startObjectOrArray():{char c;}
	{
	( startArray() {c='[';} | startObject() { c='{';})
		{
		return c;
		}
	}

/** go to EOF, check that there are only some blanks chars */
public void eof():{}
	{
	<EOF>
	}	
	