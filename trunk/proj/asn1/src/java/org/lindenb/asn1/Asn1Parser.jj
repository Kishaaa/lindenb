/**
 *  A custom ASN.1 parser just for fun
 *  When I got time, I'll finish to write this
 * http://www.obj-sys.com/asn1tutorial/node11.html
 * http://www.ncbi.nlm.nih.gov/data_specs/asn/cdd.asn
 */
 
options {
	JDK_VERSION = "1.6";
	STATIC=true;
	}

PARSER_BEGIN(Asn1Parser)

package org.lindenb.asn1;

public class Asn1Parser
{
public static void main(String args[])
  	{
  	try
  		{
  		Asn1Parser parser = new Asn1Parser(System.in);
  		parser.input();
  		}
  	catch(Throwable err)
  		{
  		err.printStackTrace();
  		}
	}
}
PARSER_END(Asn1Parser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
| 	"--": WithinComment
}

<WithinComment> SKIP:
{
    "\n": DEFAULT
|   "\r": DEFAULT
|    <~[]>
}

TOKEN :
{
	< ANY: "ANY" >
|	< BEGIN: "BEGIN" >
|	< BOOLEAN: "BOOLEAN" >
|	< CHOICE: "CHOICE" >
|	< DEFINITIONS: "DEFINITIONS" >
|	< ENUMERATED: "ENUMERATED" >
|	< END: "END" >
|	< EXPORTS: "EXPORTS" >
|	< FROM: "FROM" >
|	< IMPORTS: "IMPORTS" >
|	< INTEGER: "INTEGER" >
|	< NILL: "NULL" >
|	< OPTIONAL: "OPTIONAL" >
|	< OF: "OF" >
|	< REAL: "REAL" >
|	< SELECTION: "SELECTION" >
|	< SEQUENCE: "SEQUENCE" >
|	< SET: "SET" >
|	< VISIBLESTRING: "VisibleString" >
|	< DECL: "::=" >
|	< OB: "{" >
|	< CB: "}" >
|	< OP: "(" >
|	< CP: ")" >
|	< OA: "[" >
|	< CA: "]" >
|	< COMMA: "," >
|	< SEMICOLON: ";" >
}

TOKEN:
{
	<IDENTIFIER: (["A"-"Z"])+>
|	<INT_VALUE: (["0"-"9"])+>
}

void input():
	{
	}
	{
	definition()
	}

void definition():
	{
	}
	{
	<IDENTIFIER> <DEFINITIONS> <DECL> <BEGIN> exports()? imports()? definition_body() <END> 
	}

void exports():
	{
	}
	{
	<EXPORTS> <IDENTIFIER> (<COMMA> <IDENTIFIER> )* <SEMICOLON>
	}



void imports():
	{
	}
	{
	importSet() (<COMMA> importSet() )*  <SEMICOLON>
	}

void importSet():
	{
	}
	{
	<IMPORTS> <IDENTIFIER> (<COMMA> <IDENTIFIER> )* <FROM> <IDENTIFIER>
	}

void definition_body():
	{
	}
	{
	typeDecl() ( typeDecl())*
	}

void typeDecl():
	{
	}
	{
	<IDENTIFIER> <DECL> anyType()
	}

void anyType():
	{
	}
	{
		simpleType()
	|	complexType()
	}

void simpleType():
	{
	}
	{
		<SEQUENCE> <OF> typeName()
	|	<CHOICE> <OF> typeName()
	|	<SET> <OF> typeName()
	|	typeName()
	}

void typeName():
	{
	}
	{
		<IDENTIFIER>
	|	buildInType()
	|	enumeration()
	}

void buildInType():
	{
	}
	{
		<VISIBLESTRING> 
	| 	<INTEGER> integerEnum()?
	| 	<BOOLEAN> 

	}

void complexType():
	{
	}
	{
		choiceType()
	|	sequenceType()
	}

void choiceType():
	{
	}
	{
	<CHOICE> <OB>
	complexContent()
	<CB>
	}


void sequenceType():
	{
	}
	{
	<SEQUENCE> <OB>
	complexContent()
	<CB>
	}

void complexContent():
	{
	}
	{
	complexField() (<COMMA> complexField())*
	}


void complexField():
	{
	}
	{
	<IDENTIFIER> complexFieldType() (<OPTIONAL>)?
	}

void complexFieldType():
	{
	}
	{
	}


void enumeration():
	{
	}
	{
	<ENUMERATED> <OB> enumItem() (<COMMA> enumItem() )* <CB>  (<OPTIONAL>)?
	}

void integerEnum():
	{
	}
	{
	<OB> enumItem() (<COMMA> enumItem() )* <CB>
	}

void enumItem():
	{
	}
	{
	<IDENTIFIER> <OP> intValue() <CP>
	}

void intValue():
	{
	}
	{
	<INT_VALUE>
	}

