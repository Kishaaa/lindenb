/**
 *  A custom ASN.1 parser just for fun
 *  When I got time, I'll finish to write this
 * http://www.obj-sys.com/asn1tutorial/node11.html
 * http://www.ncbi.nlm.nih.gov/data_specs/asn/cdd.asn
 */
 
options {
	JDK_VERSION = "1.6";
	STATIC=false;
	}

PARSER_BEGIN(Asn1Parser)

package org.lindenb.asn1;
import java.util.*;
import org.lindenb.util.Compilation;
import org.lindenb.io.IOUtils;

/**
 *
 * Asn1Parser
 *
 */
public class Asn1Parser
{

/**
 *
 * ASN1 Module
 *
 */
public static class Module
	implements Iterable<NamedType>
	{
	private java.util.List<NamedType> types =  null;
	/** name of this module */
	private String name;
	/** imports */
	private List<Import> imports=null;
	/** export */
	private Set<String> export=null;
	Module(
		String name,
		java.util.List<NamedType> types,
		List<Import> imports,
		Set<String> export
		)
		{
		this.name=name;
		this.types=types;
		this.imports=imports;
		this.export=export;
		}
	
	public String getName()
		{
		return this.name;
		}
		
	public List<Import> getImports()
		{
		return this.imports;
		}
	
	public Set<String> getExports()
		{
		return this.export;
		}
	
	public NamedType get(int i)
		{
		return this.types.get(i);
		}
	
	public NamedType findTypeByName(String name)
		{
		for(int i=0;i< size();++i) if(get(i).getName().equals(name))
			{
			return get(i);
			}
		return null;
		}
	
	public int size()
		{
		return this.types.size();
		}
		
	public Iterator<NamedType> iterator()
		{
		return this.types.iterator();
		}
	}

public static enum TYPE_ENUM
	{
	SEQUENCE,
	SEQUENCE_OF,
	SET,
	SET_OF,
	CHOICE,
	CHOICE_OF,
	VISIBLE_STRING,
	OCTET_STRING,
	INTEGER,
	REAL,
	BOOLEAN,
	ENUMERATION,
	REFERENCE,
	NIL
	}

/**
 * DataType
 */ 
public static abstract class DataType
	{
	protected DataType()
		{
		}
	public abstract TYPE_ENUM getType();
	}

/**
 * SimpleType
 */ 
public static abstract  class SimpleType<T> extends DataType
	{
	private T defaultValue=null;
	
	protected SimpleType()
		{
		this(null);
		}
	
	protected SimpleType(T defaultValue)
		{
		this.defaultValue=defaultValue;
		}
	public T getDefaultValue()
		{
		return this.defaultValue;
		}
	public boolean hasDefaultValue()
		{
		return getDefaultValue()!=null;
		}	
	}


public static abstract class ComplexType
	extends DataType
	implements Iterable<ComplexNamedType>
	{
	java.util.List<ComplexNamedType> columns= null;
	
	protected ComplexType(java.util.List<ComplexNamedType> columns)
		{
		this.columns=columns;
		}
	
	public ComplexNamedType get(int i)
		{
		return this.columns.get(i);
		}
	
	public ComplexNamedType findTypeByName(String name)
		{
		for(int i=0;i< size();++i) if(get(i).getName().equals(name))
			{
			return get(i);
			}
		return null;
		}
	
	public int size()
		{
		return this.columns.size();
		}
		
	public Iterator<ComplexNamedType> iterator()
		{
		return this.columns.iterator();
		}
	}

/**
 * Choice
 */
public static class Choice extends ComplexType
	{
	Choice(java.util.List<ComplexNamedType> columns)
		{
		super(columns);
		}
	public TYPE_ENUM getType() { return TYPE_ENUM.CHOICE;}
	}

/**
 * Sequence
 */
public static class Sequence extends ComplexType
	{
	Sequence(java.util.List<ComplexNamedType> columns)
		{
		super(columns);
		}
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.SEQUENCE;}
	}

/**
 * CollectionOf
 */
public static abstract class CollectionOf extends DataType
	{
	private DataType range;
	protected CollectionOf(DataType range)
		{
		this.range=range;
		}
	public DataType getRange()
		{
		return this.range;
		}
	}
/**
 * SequenceOf
 */
public static class SequenceOf extends CollectionOf
	{
	SequenceOf(DataType range)
		{
		super(range);
		}
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.SEQUENCE_OF;}
	}

/**
 * SetOf
 */
public static class SetOf extends CollectionOf
	{
	SetOf(DataType range)
		{
		super(range);
		}
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.SET_OF;}
	}
/**
 * ChoiceOf
 */
public static class ChoiceOf extends CollectionOf
	{
	ChoiceOf(DataType range)
		{
		super(range);
		}
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.CHOICE_OF;}
	}

public static class IntegerType
	extends SimpleType<Integer>
	{
	java.util.Map<Integer,String> id2enum =null;
	
	public IntegerType()
		{
		}
	
	public IntegerType(Integer defaultValue)
		{
		super(defaultValue);
		}
	
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.INTEGER;}
	}

public static class VisibleString
	extends SimpleType<String>
	{
	public VisibleString()
		{
		super(null);
		}	
		
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.VISIBLE_STRING;}
	}

public static class OctetString
	extends SimpleType<byte[]>
	{
	public OctetString() { super(null);}
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.OCTET_STRING;}
	}


public static class BooleanType
	extends SimpleType<Boolean>
	{
	BooleanType(Boolean b)
		{
		super(b);
		}
	
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.BOOLEAN;}
	}

public static class RealType extends SimpleType
	{
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.REAL;}
	}

public static class NULLType extends SimpleType
	{
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.NIL;}
	}

public static class EnumerationType extends SimpleType
	{
	java.util.Map<Integer,String> id2enum =null;
	Integer defaultValue=null;
	
	public Integer getDefaultValue()
		{
		return defaultValue;
		}
	
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.ENUMERATION;}
	}

public static class ReferenceType extends DataType
	{
	private String typename;
	ReferenceType(String typename)
		{
		this.typename=typename;
		}
	public String getTypeName()
		{
		return this.typename;
		}
	@Override
	public TYPE_ENUM getType() { return TYPE_ENUM.REFERENCE;}
	}


/**
 * NamedType
 */
public static class NamedType
	{
	private String name;
	private DataType type;
	
	NamedType(String name,DataType type)
		{
		this.name=name;
		this.type=type;
		}
	
	public String getName()
		{
		return this.name;
		}
	public DataType getDataType()
		{
		return this.type;
		}
	}

/**
 * ComplexNamedType
 */
public static class ComplexNamedType
	extends NamedType
	{
	private boolean optional=false;
	ComplexNamedType(String name,DataType type,boolean optional)
		{
		super(name,type);
		this.optional=optional;
		}
	public boolean isOptional()
		{
		return this.optional;
		}
	}

/***
 * Import
 */
public static class Import
	{
	private String moduleName;
	private Set<String> typeNames;
	Import(String moduleName,  Set<String> typeNames)
		{
		this.moduleName=moduleName;
		this.typeNames=typeNames;
		}
	public String getModuleName()
		{
		return this.moduleName;
		}
	public Set<String> getTypeNames()
		{
		return this.typeNames;
		}
	}


	public static void main(String[] args) {
		try
			{
			int optind=0;
			while(optind< args.length)
				{
				if(args[optind].equals("-h"))
					{
					System.err.println(Compilation.getLabel());
					}
				else if(args[optind].equals("--"))
					{
					optind++;
					break;
					}
				else if(args[optind].startsWith("-"))
					{
					System.err.println("Unknown option "+args[optind]);
					}
				else 
					{
					break;
					}
				++optind;
				}
			Asn1Parser parser =null;
			if(optind==args.length)
				{
				parser= new Asn1Parser(System.in);
				parser.module();
				}
			else
				{
				while(optind< args.length)
					{
					System.err.println(args[optind]);
					java.io.BufferedReader r= IOUtils.openReader(args[optind++]);
					parser= new Asn1Parser(r);
					parser.module();
					r.close();
					}
				}
			
			} 
		catch(Throwable err)
			{
			err.printStackTrace();
			}
		}

}
PARSER_END(Asn1Parser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
| 	"--": WithinComment
}

<WithinComment> SKIP:
{
    "\n": DEFAULT
|   "\r": DEFAULT
|    <~[]>
}

TOKEN :
{
	< ANY: "ANY" >
|	< BEGIN: "BEGIN" >
|	< BOOLEAN: "BOOLEAN" >
|	< CHOICE: "CHOICE" >
|	< DEFAULTVALUE: "DEFAULT" >
|	< DEFINITIONS: "DEFINITIONS" >
|	< ENUMERATED: "ENUMERATED" >
|	< END: "END" >
|	< EXPORTS: "EXPORTS" >
|	< FALSE: "FALSE" >
|	< FROM: "FROM" >
|	< IMPORTS: "IMPORTS" >
|	< INTEGER: "INTEGER" >
|	< NILL: "NULL" >
|	< OCTET: "OCTET" >
|	< OPTIONAL: "OPTIONAL" >
|	< OF: "OF" >
|	< REAL: "REAL" >
|	< SELECTION: "SELECTION" >
|	< SEQUENCE: "SEQUENCE" >
|	< SET: "SET" >
|	< STRING: "STRING" >
|	< TRUE: "TRUE" >
|	< VISIBLESTRING: "VisibleString" >
|	< DECL: "::=" >
|	< OB: "{" >
|	< CB: "}" >
|	< OP: "(" >
|	< CP: ")" >
|	< OA: "[" >
|	< CA: "]" >
|	< COMMA: "," >
|	< SEMICOLON: ";" >
}

TOKEN:
{
	<#LETTER: (["A"-"Z"]|["a"-"z"])>
|	<#DIGIT: (["0"-"9"])>
|	<IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-"|"_")*>
|	<INT_VALUE: (<DIGIT>)+>
}


public Module module():
	{
	String moduleName=null;
	List<NamedType> definitions=null;
	List<Import> imports= new ArrayList<Import>();
	Set<String> export= new HashSet<String>();
	}
	{
	moduleName = identifier() <DEFINITIONS> <DECL> <BEGIN> (export=exports())? (imports=imports())? definitions=definition_body() <END> 
		{
		Module module=new Module(moduleName,definitions,imports,export);
		return module;
		}
	}

private Set<String> exports():
	{
	Set<String> export= new HashSet<String>();
	String s1=null;
	String s2=null;
	}
	{
	<EXPORTS> s1=identifier() { export.add(s1);} (<COMMA> s2=identifier()  { export.add(s2);} )* <SEMICOLON>
		{
		return export;
		}
	}



private List<Import> imports():
	{
	List<Import> list= new ArrayList<Import>();
	Import i1=null;
	Import i2=null;
	}
	{
	<IMPORTS> i1=importSet() { list.add(i1);} (i2=importSet()  { list.add(i2);} )*  <SEMICOLON>
		{
		return list;
		}
	}

private Import importSet():
	{
	String name=null;
	String id1=null;
	String id2=null;
	Set<String> set= new HashSet<String>();
	}
	{
	id1=identifier()
		{
		set.add(id1);
		} (<COMMA> id2=identifier() { set.add(id2);} )* <FROM> name=identifier()
		{
		return new Import(name,set);
		}
	}

private List<NamedType> definition_body():
	{
	List<NamedType> types= new ArrayList<NamedType>();
	Set<String> seen= new HashSet<String>();
	NamedType t1=null;
	NamedType t2=null;
	}
	{
	t1=typeDecl() { types.add(t1); seen.add(t1.getName());} ( t2=typeDecl()
			{
			if(seen.contains(t2.getName())) throw new ParseException("Duplicate Name  "+t2.getName() );
			types.add(t2);
			seen.add(t2.getName());
			})*
		{
		return types;
		}
	}

private NamedType typeDecl():
	{
	String name=null;
	DataType datatype=null;
	}
	{
	name = identifier() <DECL> datatype=anyType()
		{
		return new NamedType(name,datatype);
		}
	}

private DataType anyType():
	{
	DataType dt=null;
	}
	{
	(	dt= sequenceOfType()
	|	dt= choiceOfType()
	|	dt= setOfType()
	|	dt= enumType()
	|	dt= referenceType()
	|	dt= visibleStringType()
	|	dt= octetString()
	|	dt= integerType()
	|	dt= booleanType()
	|	dt= nullType()
	|	dt= realType()
	)	{
		return dt;
		}
	}

private NULLType nullType():
	{
	}
	{
	<NILL>
		{
		return new NULLType();
		}
	}

private ReferenceType referenceType():
	{
	String id;
	}
	{
	id=identifier()
		{
		return new ReferenceType(id);
		}
	}

private DataType sequenceOfType():
	{
	List<ComplexNamedType> columns=null;
	DataType range=null;
	}
	{
	<SEQUENCE>
		(
			<OF> range=anyType()
				{
				return new SequenceOf(range);
				}
		| 	<OB> columns=complexContent() <CB>
				{
				return new Sequence(columns);
				}
		)
	}

private DataType choiceOfType():
	{
	DataType range=null;
	List<ComplexNamedType> columns=null;
	}
	{
	<CHOICE>
		(
			<OF> range=anyType()
				{
				return new ChoiceOf(range);
				}
		|	<OB> columns=complexContent() <CB>
				{
				return new Choice(columns);
				}
		)
	}



private SetOf setOfType():
	{
	DataType range=null;
	}
	{
	<SET>  <OF> range=anyType()
		{
		return new SetOf(range);
		}
	}

private EnumerationType enumType():
	{
	String defaultValue=null;
	Map<Integer,String> id2enum=null;
	}
	{
	<ENUMERATED> id2enum=integerEnum() (<DEFAULTVALUE> defaultValue=identifier() )?
		{
		EnumerationType t=  new EnumerationType();
		Integer defaultInt=null;
		t.id2enum=id2enum;
		if(defaultValue!=null)
			{
			for(Integer key: t.id2enum.keySet())
				{
				if( t.id2enum.get(key).equals( defaultValue ) )
					{
					defaultInt=key;
					break;
					}
				}
			if( defaultInt==null)
				{
				 throw new ParseException("Cannot find default value "+defaultValue );
				}
			}
		t.defaultValue=defaultInt;

		return t;
		}
	
	}


private OctetString octetString():
	{
	}
	{
	<OCTET> <STRING> {
		return new OctetString();
		}
	}


private VisibleString visibleStringType():
	{
	}
	{
	<VISIBLESTRING> {
		return new VisibleString();
		}
	}


private IntegerType integerType():
	{
	Integer defaultInt=null;
	String defaultValue=null;
	Map<Integer,String> id2enum=null;
	}
	{
	<INTEGER> ( id2enum=integerEnum()  (<DEFAULTVALUE> defaultValue=identifier())? | <DEFAULTVALUE> defaultInt=intValue() )?
		{
		IntegerType t;
		
		if(id2enum!=null && defaultValue!=null)
			{
			for(Integer key: id2enum.keySet())
				{
				if( id2enum.get(key).equals( defaultValue ) )
					{
					defaultInt=key;
					break;
					}
				}
			if( defaultInt==null)
				{
				throw new ParseException("Cannot find default value "+defaultValue );
				}
			t= new IntegerType(defaultInt);
			}
		else
			{
			t= new IntegerType();	
			}
		t.id2enum=id2enum;
		return t;
		}
	}

private BooleanType booleanType():
	{
	Boolean defaultValue=null;
	}
	{
	<BOOLEAN>  (<DEFAULTVALUE> defaultValue=booleanValue() )?
		{
		return new BooleanType(defaultValue);
		}
	}

private RealType realType():
	{
	}
	{
	<REAL> { return new RealType(); }
	}


private List<ComplexNamedType> complexContent():
	{
	List<ComplexNamedType> columns= new ArrayList<ComplexNamedType>();
	ComplexNamedType c1=null;
	ComplexNamedType c2=null;
	}
	{
	c1=complexField()
		{
		columns.add(c1);
		} (<COMMA> c2=complexField()
			{
			for(ComplexNamedType c: columns)
				{
				if(c.getName().equals(c2.getName()))
					{
					throw new ParseException("duplicate name "+c2 );
					}
				}
			columns.add(c2);
			})*
		{
		return columns;
		}
	}


private ComplexNamedType complexField():
	{
	String fieldName;
	DataType type;
	boolean optional=false;
	}
	{
	fieldName = identifier()
	type = anyType()
	(<OPTIONAL> { optional=true; })?
		{
		return new ComplexNamedType(fieldName,type,optional);
		}
	}




private Map<Integer,String> integerEnum():
	{
	Map<Integer,String> id2enum=new TreeMap<Integer,String>();
	Map.Entry<Integer,String> entry1=null;
	Map.Entry<Integer,String> entry2=null;
	}
	{
	<OB> entry1=enumItem()
		{
		id2enum.put(entry1.getKey(),entry1.getValue());
		}(<COMMA> entry2=enumItem()
			{
			if( id2enum.containsKey( entry2.getKey())) throw new ParseException("Duplicate key "+entry2.getKey() );
			for(Integer k: id2enum.keySet())
				{
				if( id2enum.get(k).equals(entry2.getValue())) throw new ParseException("Duplicate value "+entry2.getValue() );
				}
			id2enum.put(entry2.getKey(),entry2.getValue());
			})* <CB>
		{
		
		return id2enum;
		}
	}

private Map.Entry<Integer,String> enumItem():
	{
	String value=null;
	Integer key=null;
	}
	{
	value=identifier() <OP> key=intValue() <CP>
		{
		return new AbstractMap.SimpleEntry<Integer,String>(key,value);
		}
	}

private Integer intValue():
	{
	Token t;
	}
	{
	t=<INT_VALUE>
		{
		return new Integer(t.image);
		}
	}

private boolean booleanValue():
	{
	}
	{
		<TRUE> { return true;}
	|	<FALSE> { return false;}
	}

private String identifier():
	{
	Token t;
	}
	{
	t=<IDENTIFIER>
		{
		return t.image;
		}
	}


